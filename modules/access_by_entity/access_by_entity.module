<?php

/**
 * @file
 * Allows access to terms in a vocabulary to be limited by user or role.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\access_by_entity\EntityTypeInfo;

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
/**
 * Implements hook_entity_type_alter().
 */
function access_by_entity_entity_type_alter(array &$entity_types) {
  return \Drupal::service('class_resolver')->getInstanceFromDefinition(
      EntityTypeInfo::class
    )->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_operation().
 */
function access_by_entity_entity_operation(EntityInterface $entity) {
  return \Drupal::service('class_resolver')->getInstanceFromDefinition(
      EntityTypeInfo::class
    )->entityOperation($entity);
}

/**
 * Implements hook_entity_entity_operation_alter().
 */
function access_by_entity_entity_operation_alter(array &$operations,
  EntityInterface $entity
) {
  return \Drupal::service('class_resolver')->getInstanceFromDefinition(
      EntityTypeInfo::class
    )->entityOperationAlter($operations, $entity);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function access_by_entity_menu_local_tasks_alter(&$data, $route_name) {
  return \Drupal::service('class_resolver')->getInstanceFromDefinition(
      EntityTypeInfo::class
    )->entityLocalTasksAlter($data, $route_name);
}

/**
 * Implements hook_views_query_alter().
 */
function access_by_entity_views_query_alter(ViewExecutable $view,
  QueryPluginBase $query
) {
  $entity_ids = [];
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  $access_storage = \Drupal::service('access_by_entity.access_storage');

  $results = $access_storage->findBy(
    [
      ['key' => 'rid', 'value' => $roles],
      ['key' => 'entity_type_id', 'value' => $view->rowPlugin->getEntityTypeId()],
    ]
  );
  foreach ($results as $result) {
    $entity_ids[] = $result->entity_id;
  }

  if (!empty($entity_ids)) {
    $query->where['access_by_entity'] = [
      'args'       => NULL,
      'type'       => 'AND',
      'conditions' => [
        [
          'field'    => $view->rowPlugin->base_field,
          'value'    => $entity_ids,
          'operator' => 'NOT IN',
        ],
      ],
    ];
  }

}
